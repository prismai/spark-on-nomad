#!/bin/bash

set -euxo pipefail

captest --text

docker run --rm busybox true

retry() {
    local count=$1
    local delay=$2
    shift 2

    while ! "$@"; do
        if [ $((count--)) -eq 0 ]; then
            return 1
        fi
        sleep "$delay"
    done
}

retry_curl() {
    retry "$1" "$2" curl --silent --show-error --fail -o >(tee curl-out) "$3"
}

try_consul_service() {
    curl --silent --show-error --fail -o >(tee curl-out) http://cluster:8500/v1/catalog/service/"$1"
    [ "$(<curl-out)" != "[]" ]
}

retry_consul_service() {
    retry "$1" "$2" try_consul_service "$3"
}

retry_curl 10 2 http://cluster:8080/health
retry_curl 10 2 http://cluster:8500/v1/status/leader
retry_curl 10 2 http://cluster:4646/v1/status/leader

cat >test-cm-file <<'_END_'
Test config map
_END_

curl \
    -XPUT \
    --silent \
    --show-error \
    --fail \
    --data-binary @test-cm-file \
    http://cluster:8500/v1/kv/k8s-configmaps/test-ns/test-cm/file

curl --silent --show-error --fail -o test-cm-file.in0 http://cluster:8500/v1/kv/k8s-configmaps/test-ns/test-cm/file?raw

cmp test-cm-file test-cm-file.in0

cat >test-job.json <<_END_
{
  "Job": {
    "ID": "test",
    "Name": "test",
    "Type": "service",
    "Priority": 50,
    "Datacenters": ["dc1"],
    "TaskGroups": [
      {
        "Name": "group1",
        "Count": 1,
        "Networks": [
          {
            "DynamicPorts": [
              {
                "label": "http"
              }
            ]
          }
        ],
        "Services": [
            {
                "Name": "static-http",
                "PortLabel": "http"
            }
        ],
        "Tasks": [
          {
            "Name": "http-server",
            "Driver": "docker",
            "User": "",
            "Config": {
              "image": "pierrezemb/gostatic:latest",
              "args": [
                "-enable-health",
                "-port",
                "\${NOMAD_PORT_http}"
              ],
              "network_mode": "container:tests_cluster_1",
              "volumes": [
                "../alloc/cm/TEST:/srv/http:ro"
              ]
            },
            "Resources": {
              "CPU": 500,
              "MemoryMB": 512
            },
            "Leader": true
          },
          {
            "Name": "k8s-configmap",
            "Driver": "docker",
            "User": "",
            "Config": {
              "image": "$K8S_EMUL_IMAGE",
              "command": "python",
              "args": ["k8s-volumes-emul.py"],
              "network_mode": "container:tests_cluster_1"
            },
            "Env": {
              "CONSUL_ADDR": "http://\${attr.unique.network.ip-address}:8500",
              "CONSUL_KV2DIR_DIR_TEST": "k8s-configmaps/test-ns/test-cm",
              "CONSUL_KV2DIR_ROOT": "/alloc/cm"
            },
            "Resources": {
              "CPU": 500,
              "MemoryMB": 512
            },
            "Leader": false
          }
        ],
        "RestartPolicy": {
          "Interval": 300000000000,
          "Attempts": 10,
          "Delay": 25000000000,
          "Mode": "delay"
        },
        "ReschedulePolicy": {
          "Attempts": 10,
          "Delay": 30000000000,
          "DelayFunction": "exponential",
          "Interval": 36000000000000,
          "MaxDelay": 3600000000000,
          "Unlimited": false
        },
        "EphemeralDisk": {
          "SizeMB": 120
        }
      }
    ],
    "Update": {
      "MaxParallel": 1,
      "MinHealthyTime": 10000000000,
      "HealthyDeadline": 180000000000,
      "AutoRevert": false,
      "Canary": 0
    }
  }
}
_END_

jq . test-job.json
curl --silent --show-error --fail -XPOST http://cluster:4646/v1/jobs --data @test-job.json

ip addr
retry_consul_service 30 2 static-http
addr=$(jq -r '.[0] | "\(.ServiceAddress):\(.ServicePort)"' curl-out)
retry_curl 30 2 http://"$addr"/health
retry_curl 30 2 http://"$addr"/file
cmp test-cm-file curl-out

ln -s /opt/spark* /opt/spark
find /root/.m2/repository -name 'hadoop-aws-*.jar' -exec ln {} /opt/spark/jars \;
find /root/.m2/repository -name 'aws-java-sdk-*.jar' -exec ln {} /opt/spark/jars \;

(
    cd /opt/spark
    ./bin/docker-image-tool.sh -t local -p ./kubernetes/dockerfiles/spark/bindings/python/Dockerfile build
)

/opt/spark/bin/spark-submit \
    --master k8s://http://cluster:8080 \
    --deploy-mode cluster \
    --name spark-pi \
    --class org.apache.spark.examples.SparkPi \
    --conf spark.executor.instances=1 \
    --conf spark.hadoop.fs.s3a.access.key=s3key \
    --conf spark.hadoop.fs.s3a.connection.ssl.enabled=false \
    --conf spark.hadoop.fs.s3a.endpoint=minio:9000 \
    --conf spark.hadoop.fs.s3a.fast.upload=true \
    --conf spark.hadoop.fs.s3a.impl=org.apache.hadoop.fs.s3a.S3AFileSystem \
    --conf spark.hadoop.fs.s3a.path.style.access=true \
    --conf spark.hadoop.fs.s3a.secret.key=s3secret \
    --conf spark.kubernetes.authenticate.driver.serviceAccountName=spark-serviceaccount \
    --conf spark.kubernetes.container.image=spark:local \
    --conf spark.kubernetes.driver.master=http://cluster:8080 \
    --conf spark.kubernetes.driver.pod.name=spark-pi-driver \
    --conf spark.kubernetes.file.upload.path=s3a://spark \
    --conf spark.kubernetes.namespace=spark \
    file:///opt/spark/examples/jars/spark-examples_2.12-3.0.0.jar
